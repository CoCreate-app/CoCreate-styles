/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["CoCreateSelected"] = factory();
	else
		root["CoCreateSelected"] = factory();
})(this, function() {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/CoCreate-styles.js":
/*!********************************!*\
  !*** ./src/CoCreate-styles.js ***!
  \********************************/
/***/ (() => {

eval("function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/*global MutationObserver*/\n\n/**\n * data-style: classStyle | style | attribute\n * data-style_sync: any valid css property\n * data-style_unit: any valid css unit type\n * data-style_target: unique id of element written to data-element_id\n */\n// todo: disable input when there is no data-style, there is no reason it to have default value it should be\n// disabled\n// import { refs as pickrRefs } from '../../CoCreate-builder/src/pickr.js';\n//dummy change 2\nvar pickrRefs = window.CoCreatePickr.refs;\nvar filters = [];\nvar allFrames = new Map();\n\nfunction allFrame(callback) {\n  var result = new Set();\n\n  var _iterator = _createForOfIteratorHelper(allFrames),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _step$value = _slicedToArray(_step.value, 2),\n          frameObject = _step$value[0],\n          frame = _step$value[1];\n\n      var callbackResult = callback(frame.document, frame.window);\n      if (callbackResult && typeof callbackResult[Symbol.iterator] === \"function\") callbackResult.forEach(function (el) {\n        return result.add(el);\n      });else if (callbackResult) result.add(callbackResult);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return Array.from(result).filter(function (el) {\n    return !filters.some(function (filter) {\n      return el.matches(filter);\n    });\n  });\n}\n\nfunction watchInputChange(mutation) {\n  var inputMeta = validateNewInput(mutation.target);\n  if (!inputMeta) return;\n\n  if (mutation.attributeName === \"data-style_target\") {\n    var element = getElement(inputMeta.input);\n    if (element) updateInput(element, [inputMeta.input]);\n  } // else if (mutation.attributeName === \"value\") {\n  //   let { input, dataAttribute, dataProperty } = inputMeta;\n  //   let elementId = input.getAttribute(\"data-style_target\");\n  //   updateElement(inputMeta, elementId, true);\n  // }\n\n} // function watchElementChange(mutationsList, observer) {\n//   for (let mutation of mutationsList) {\n//     updateInput(mutation.target);\n//   }\n// }\n// function watchInputChange(mutationsList, observer) {\n//   watchElementChangeObserver.disconnect();\n//   for (let mutation of mutationsList)\n//     if (\n//       // mutation.target.isReactive !== false &&\n//       mutation.type === \"attributes\" &&\n//       mutation.target.tagName === \"INPUT\"\n//     ) {\n//       let inputMeta = validateNewInput(mutation.target);\n//       if (!inputMeta) return;\n//       if (mutation.attributeName === \"data-style_target\") {\n//         let element = getElement(inputMeta.input);\n//         // mutation.target.isReactive = false;\n//         updateInput(element, [inputMeta.input]);\n//       } else {\n//         updateElement(inputMeta);\n//       }\n//     }\n//   watchElementChangeObserver.observe(canvas, configElement);// todo: no canvas\n// }\n// canvas.body.addEventListener(\"click\", (e) => {\n//   updateInput(e.target)\n// });\n\n\nfunction getInputs(element) {\n  var inputs = [];\n  var allInputs = Array.from(document.getElementsByTagName(\"input\"));\n  allInputs.forEach(function (inputCandidate) {\n    var inputMeta = validateNewInput(inputCandidate);\n    if (!inputMeta) return;\n    var allReferencedEl = allFrame(function (frame) {\n      return frame.querySelectorAll(inputMeta.input.getAttribute(\"data-style_target\"));\n    });\n\n    if (Array.from(allReferencedEl).includes(element)) {\n      inputs.push(inputMeta.input);\n    }\n  });\n  return inputs;\n}\n\nfunction getElement(input) {\n  var id = input.getAttribute(\"data-style_target\");\n  if (id) return allFrame(function (frame) {\n    return frame.querySelector(id);\n  })[0];else return false;\n} // function getRealStaticCompStyleOld(element) {\n//   // calculate real css instead of comupted element\n//   watchElementChangeObserver.disconnect();\n//   let oldDispaly = element.style.display;\n//   element.style.display = \"none\";\n//   let computedStylesLive = window.getComputedStyle(element);\n//   let computedStyles = Object.assign({}, computedStylesLive);\n//   computedStyles.display = oldDispaly;\n//   element.style.display = oldDispaly;\n//   if (element.getAttribute(\"style\") == \"\") element.removeAttribute(\"style\");\n//   watchElementChangeObserver.observe(canvas, configElement);\n//   return computedStyles;\n// }\n// function getAllStyles() {\n//   for (let styleSheet of document.styleSheets) {\n//     let style;\n//     try {\n//       style = styleSheet.cssRules || styleSheet.rules;\n//     } catch (error) {\n//       console.log(\"couldn't parse style\");\n//     }\n//     if(!style) continue;\n//       for (let rule of style) {\n//         let selector = rule.selectorText;\n//         querySelectorAll\n//       }\n//     style = undefined;\n//   }\n// }\n// getAllStyles();\n\n\nvar cache = new Map();\n\nfunction getRealStaticCompStyle(element) {\n  var shouldCache = false;\n\n  if (cache.has(element)) {\n    return cache.get(element);\n  } else if (cache.length < 10) {\n    shouldCache = true;\n  } // calculate real css instead of comupted element\n  // watchElementChangeObserver.disconnect();\n\n\n  var oldDispaly = element.style.display; // element.setAttribute('no-observe', true)\n\n  element.style.display = \"none\";\n  var computedStylesLive = window.getComputedStyle(element);\n  var computedStyles = Object.assign({}, computedStylesLive);\n  computedStyles.display = oldDispaly;\n  element.style.display = oldDispaly;\n  if (element.getAttribute(\"style\") == \"\") element.removeAttribute(\"style\"); // element.removeAttribute('no-observe')\n  // watchElementChangeObserver.observe(canvas, configElement);\n\n  if (shouldCache) cache.set(element, computedStyles);\n  return computedStyles;\n}\n\nfunction validateNewInput(input) {\n  var dataAttribute = input.getAttribute(\"data-style\");\n  if (!dataAttribute) return; // console.warn(\"cc-style: input doesn't have data-style\")\n\n  dataAttribute = dataAttribute.toLowerCase();\n  var dataProperty = input.getAttribute(\"data-style_sync\");\n  if (!dataProperty) return; // console.warn(\"cc-style: input doesn't have data-style\")\n\n  dataProperty = dataProperty.toLowerCase();\n  return {\n    input: input,\n    dataAttribute: dataAttribute,\n    dataProperty: dataProperty\n  };\n}\n\nfunction parseUnit(style) {\n  var value = parseFloat(style);\n\n  if (!isNaN(value)) {\n    var valueLength = (value + \"\").length;\n    return [value, style.substr(valueLength) || \"none\"];\n  }\n\n  return [style, \"\"];\n}\n\nfunction getCoCreateStyle(classList) {\n  var styles = {};\n  classList.forEach(function (classname) {\n    var _classname$split = classname.split(\":\"),\n        _classname$split2 = _slicedToArray(_classname$split, 2),\n        name = _classname$split2[0],\n        value = _classname$split2[1];\n\n    styles[name] = value;\n  });\n  return styles;\n}\n\nfunction putCoCreateStyle(classList, newStyles) {\n  var styleMap = new Map();\n  classList.forEach(function (classname) {\n    var _classname$split3 = classname.split(\":\"),\n        _classname$split4 = _slicedToArray(_classname$split3, 2),\n        name = _classname$split4[0],\n        value = _classname$split4[1];\n\n    styleMap.set(name, value);\n  });\n\n  for (var _i2 = 0, _Object$entries = Object.entries(newStyles); _i2 < _Object$entries.length; _i2++) {\n    var _Object$entries$_i = _slicedToArray(_Object$entries[_i2], 2),\n        name = _Object$entries$_i[0],\n        value = _Object$entries$_i[1];\n\n    if (styleMap.has(name)) {\n      var _value = styleMap.get(name);\n\n      classList.remove(name + \":\" + _value);\n    }\n\n    classList.add(name + \":\" + value);\n  }\n}\n\nfunction removeccCssStyle(classList, property) {\n  var coCreateCss = getCoCreateStyle(classList);\n  delete coCreateCss[property];\n  putCoCreateStyle(classList, coCreateCss);\n}\n\nfunction assignElementId(element) {\n  var isReactive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var inputs = Array.from(document.getElementsByTagName(\"input\"));\n  inputs.forEach(function (inputCandidate) {\n    var inputMeta = validateNewInput(inputCandidate);\n    if (!inputMeta) return;\n    var input = inputMeta.input,\n        dataAttribute = inputMeta.dataAttribute,\n        dataProperty = inputMeta.dataProperty;\n    input.isReactive = isReactive;\n    var elementId = element.getAttribute(\"data-element_id\");\n    input.setAttributeIfDiffer(\"data-style_target\", \"[data-element_id=\".concat(elementId, \"]\"));\n  });\n} // picked up from stackoverflow\n\n\nfunction rgba2hex(orig) {\n  var a,\n      isPercent,\n      rgb = orig.replace(/\\s/g, '').match(/^rgba?\\((\\d+),(\\d+),(\\d+),?([^,\\s)]+)?/i),\n      alpha = (rgb && rgb[4] || \"\").trim(),\n      hex = rgb ? (rgb[1] | 1 << 8).toString(16).slice(1) + (rgb[2] | 1 << 8).toString(16).slice(1) + (rgb[3] | 1 << 8).toString(16).slice(1) : orig;\n\n  if (alpha !== \"\") {\n    a = alpha;\n  } else {\n    a = 1;\n  } // multiply before convert to HEX\n\n\n  a = (a * 255 | 1 << 8).toString(16).slice(1);\n  hex = hex + a;\n  return hex;\n} // mutation reflect data-style_unit\n\n\nfunction setPlaceHolders(element) {\n  var inputs = getInputs(element);\n  inputs.forEach(function (inputCandidate) {\n    var inputMeta = validateNewInput(inputCandidate);\n    if (!inputMeta) return;\n    var input = inputMeta.input,\n        dataAttribute = inputMeta.dataAttribute,\n        dataProperty = inputMeta.dataProperty;\n    var cmlDataProperty = toCamelCase(dataProperty);\n    var elementId = element.getAttribute(\"data-element_id\");\n    if (!elementId) return;\n    var inputElementId = input.getAttribute(\"data-style_target\");\n\n    if (elementId != inputElementId) {\n      var computedStyles = getRealStaticCompStyle(element);\n      var style;\n\n      switch (dataAttribute) {\n        case \"style\":\n          style = computedStyles[cmlDataProperty];\n          break;\n\n        case \"classstyle\":\n          var coCreateCss = getCoCreateStyle(element.classList);\n          style = coCreateCss[cmlDataProperty];\n          if (!style) style = computedStyles[cmlDataProperty];\n          break;\n\n        default:\n          style = computedStyles[cmlDataProperty];\n      } // style= true;\n      // update style unit\n      // todo: why it's look like update input? should i update?\n\n\n      if (style) {\n        var _parseUnit = parseUnit(style),\n            _parseUnit2 = _slicedToArray(_parseUnit, 2),\n            value = _parseUnit2[0],\n            unit = _parseUnit2[1];\n\n        switch (input.type) {\n          case 'file':\n            break;\n\n          case 'color':\n            // CoCreate.replaceDataCrdt({\n            //   collection: 'builder',\n            //   document_id: 'null',\n            //   name: input.getAttribute('name'),\n            //   value: value + '',\n            //   position: '0',\n            // })\n            input.value = rgba2hex(value);\n            break;\n\n          default:\n            // CoCreate.replaceDataCrdt({\n            //   collection: 'builder',\n            //   document_id: 'null',\n            //   name: input.getAttribute('name'),\n            //   value: value + '',\n            //   position: '0',\n            // })\n            input.value = value + '';\n        }\n\n        input.setAttributeIfDiffer(\"data-style_unit\", unit || '');\n      }\n    }\n  });\n}\n\nfunction updateInput(element, inputs) {\n  var computedStyles = getRealStaticCompStyle(element); // let computedStyles = {};\n\n  if (!inputs) inputs = getInputs(element);\n  inputs.forEach(function (inputCandidate) {\n    var inputMeta = validateNewInput(inputCandidate);\n    if (!inputMeta) return;\n    var input = inputMeta.input,\n        dataAttribute = inputMeta.dataAttribute,\n        dataProperty = inputMeta.dataProperty;\n    var cmlDataProperty = toCamelCase(dataProperty);\n    var elementId = element.getAttribute(\"data-element_id\");\n    if (!elementId) return; //calculate style\n\n    var style;\n\n    switch (dataAttribute) {\n      case \"style\":\n        style = computedStyles[cmlDataProperty];\n        break;\n\n      case \"classstyle\":\n        var coCreateCss = getCoCreateStyle(element.classList);\n        style = coCreateCss[cmlDataProperty];\n        if (!style) style = computedStyles[cmlDataProperty];\n        break;\n\n      default:\n        style = computedStyles[cmlDataProperty];\n    } // update style unit\n\n\n    if (style) {\n      var _parseUnit3 = parseUnit(style),\n          _parseUnit4 = _slicedToArray(_parseUnit3, 2),\n          value = _parseUnit4[0],\n          unit = _parseUnit4[1];\n\n      if (inputMeta.input.classList.contains('pickr')) {\n        if (!pickrRefs.has(input)) return;\n        var pickrIns = pickrRefs.get(input);\n        window.CoCreatePickr.disabledEvent = true;\n        pickrIns.setColor(style);\n        window.CoCreatePickr.disabledEvent = false;\n      } else {\n        switch (input.type) {\n          case 'file':\n            break;\n\n          case 'color':\n            // CoCreate.replaceDataCrdt({\n            //   collection: 'builder',\n            //   document_id: 'null',\n            //   name: input.getAttribute('name'),\n            //   value: value + '',\n            //   position: '0',\n            // })\n            input.value = rgba2hex(value);\n            break;\n\n          default:\n            // CoCreate.replaceDataCrdt({\n            //   collection: 'builder',\n            //   document_id: 'null',\n            //   name: input.getAttribute('name'),\n            //   value: value + '',\n            //   position: '0',\n            // })\n            input.value = value + '';\n        }\n      }\n\n      input.setAttributeIfDiffer(\"data-style_unit\", unit || '');\n    }\n  });\n}\n\nfunction updateElementValue(value, dataAttribute, dataProperty, elementId) {\n  var element = allFrame(function (frame) {\n    return frame.querySelector(elementId);\n  })[0];\n  var camelDataProperty = toCamelCase(dataProperty);\n\n  switch (dataAttribute) {\n    case \"classstyle\":\n      element.setCCStyle(dataProperty, value);\n      break;\n\n    case \"style\":\n      element.setStlyeIfDiffer(camelDataProperty, value);\n      break;\n\n    default: // code\n\n  }\n}\n\nfunction updateElement(inputMeta, elementId, isColl) {\n  var element = allFrame(function (frame) {\n    return frame.querySelector(elementId);\n  })[0];\n  var input = inputMeta.input,\n      dataProperty = inputMeta.dataProperty,\n      dataAttribute = inputMeta.dataAttribute;\n  var camelDataProperty = toCamelCase(dataProperty);\n  var style;\n\n  if (input.classList.contains('pickr')) {\n    if (!pickrRefs.has(input)) return;\n    var pickrIns = pickrRefs.get(input);\n    style = pickrIns.getColor().toHEXA().toString();\n\n    switch (dataAttribute) {\n      case \"classstyle\":\n        element.setCCStyle(dataProperty, style);\n        isColl && collaborate({\n          value: style,\n          unit: '',\n          input: input,\n          dataProperty: dataProperty,\n          dataAttribute: dataAttribute,\n          element: element,\n          elementId: elementId\n        });\n        break;\n\n      case \"style\":\n        element.setStlyeIfDiffer(camelDataProperty, style) && isColl && collaborate({\n          value: style,\n          unit: '',\n          input: input,\n          dataProperty: dataProperty,\n          dataAttribute: dataAttribute,\n          element: element,\n          elementId: elementId\n        });\n        break;\n\n      default: // code\n\n    }\n  } else {\n    var _parseUnit5 = parseUnit(input.value),\n        _parseUnit6 = _slicedToArray(_parseUnit5, 2),\n        value = _parseUnit6[0],\n        unit = _parseUnit6[1];\n\n    unit = input.getAttribute(\"data-style_unit\");\n\n    switch (dataAttribute) {\n      case \"classstyle\":\n        // when input is empty remove that style\n        if (!input.value) {\n          removeccCssStyle(element.classList, dataProperty);\n          isColl && collaborate({\n            value: value,\n            input: input,\n            dataProperty: dataProperty,\n            dataAttribute: dataAttribute,\n            element: element,\n            elementId: elementId\n          });\n          return;\n        } // when there is style set that\n\n\n        style = value + unit;\n        element.setCCStyle(dataProperty, style);\n        isColl && collaborate({\n          value: value,\n          unit: unit,\n          input: input,\n          dataProperty: dataProperty,\n          dataAttribute: dataAttribute,\n          element: element,\n          elementId: elementId\n        });\n        break;\n\n      case \"style\":\n        // let computedStyles = getRealStaticCompStyle(element);\n        // let styleValue = computedStyles[dataProperty];\n        if (!input.value) {\n          element.setStlyeIfDiffer(camelDataProperty, \"\") && isColl && collaborate({\n            value: value,\n            input: input,\n            dataProperty: dataProperty,\n            dataAttribute: dataAttribute,\n            element: element,\n            elementId: elementId\n          }); // element.style[dataProperty] = \"\";\n\n          return;\n        }\n\n        style = value + unit;\n        element.setStlyeIfDiffer(camelDataProperty, style) && isColl && collaborate({\n          value: value,\n          unit: unit,\n          input: input,\n          dataProperty: dataProperty,\n          dataAttribute: dataAttribute,\n          element: element,\n          elementId: elementId\n        }); // element.style[dataProperty] = style;\n\n        break;\n\n      default:\n    }\n  }\n}\n\nfunction toCamelCase(str) {\n  var index = 0;\n\n  do {\n    index = str.indexOf(\"-\", index);\n\n    if (index !== -1) {\n      var t = str.substring(0, index);\n      t += String.fromCharCode(str.charCodeAt(index + 1) - 32);\n      t += str.substr(index + 2);\n      str = t;\n    } else break;\n  } while (true);\n\n  return str;\n}\n\nfunction setAttributeIfDiffer(property, value) {\n  if (this.getAttribute(property) !== value) this.setAttribute(property, value);\n}\n\nfunction setStlyeIfDiffer(property, value) {\n  var computedStyles = getRealStaticCompStyle(this);\n\n  if (computedStyles[property] !== value) {\n    this.style[property] = value;\n    return true;\n  } else return false;\n}\n\nfunction addClassIfDiffer(className) {\n  if (!this.classList.has(className)) this.classList.add(className);\n}\n\nfunction setCCStyle(property, newValue) {\n  var _iterator2 = _createForOfIteratorHelper(this.classList),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var classname = _step2.value;\n\n      var _classname$split5 = classname.split(\":\"),\n          _classname$split6 = _slicedToArray(_classname$split5, 2),\n          name = _classname$split6[0],\n          value = _classname$split6[1];\n\n      if (name === property) {\n        this.classList.replace(classname, property + \":\" + newValue);\n        break;\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  this.classList.add(property + \":\" + newValue);\n}\n\nfunction getCCStyle(property) {\n  var styleMap = new Map();\n\n  var _iterator3 = _createForOfIteratorHelper(this.classList),\n      _step3;\n\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var classname = _step3.value;\n\n      var _classname$split7 = classname.split(\":\"),\n          _classname$split8 = _slicedToArray(_classname$split7, 2),\n          name = _classname$split8[0],\n          value = _classname$split8[1];\n\n      if (name === property) {\n        return value;\n      }\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n}\n\nvar tools = {};\n\nfunction init(_ref) {\n  var windowObject = _ref.windowObject,\n      docObject = _ref.docObject,\n      isIframe = _ref.isIframe,\n      frame = _ref.frame,\n      onCollaboration = _ref.onCollaboration;\n  var ref;\n  tools.onCollaboration = onCollaboration;\n\n  if (isIframe) {\n    var frameWindow = frame.contentWindow;\n    var frameDocument = frameWindow.document || frame.contentDocument;\n    ref = {\n      frame: frame,\n      window: frameWindow,\n      document: frameDocument,\n      isIframe: true\n    };\n    allFrames.set(frame, ref);\n  } else {\n    ref = {\n      window: windowObject,\n      document: docObject,\n      isIframe: false\n    };\n    allFrames.set(\"main\", ref);\n  }\n\n  ref.window.HTMLElement.prototype.setAttributeIfDiffer = setAttributeIfDiffer;\n  ref.window.HTMLElement.prototype.setStlyeIfDiffer = setStlyeIfDiffer;\n  ref.window.HTMLElement.prototype.addClassIfDiffer = addClassIfDiffer;\n  ref.window.HTMLElement.prototype.setCCStyle = setCCStyle;\n  ref.window.HTMLElement.prototype.getCCStyle = getCCStyle;\n  ref.window.addEventListener(\"load\", function () {\n    ref.window.CoCreateObserver.add({\n      name: \"ccStyle\",\n      observe: [\"attributes\"],\n      attributes: [\"data-style_target\", \"value\"],\n      include: \"INPUT, .pickr\",\n      task: watchInputChange\n    });\n  });\n  ref.document.addEventListener(\"input\", function (e) {\n    var input = e.target; // input.isReactive = true;\n\n    var inputMeta = validateNewInput(input);\n    if (!inputMeta) return;\n    var elementId = input.getAttribute(\"data-style_target\");\n    updateElement(inputMeta, elementId, true);\n  });\n}\n\nfunction addFilter(selector) {\n  filters.push(selector);\n}\n\nwindow.ccStyle = {\n  init: init,\n  addFilter: addFilter\n};\nwindow.addEventListener(\"load\", function () {\n  window.CoCreateObserver.add({\n    name: \"ccStyle\",\n    observe: [\"attributes\"],\n    attributes: [\"data-style_target\", \"value\"],\n    include: \"INPUT, .pickr\",\n    task: watchInputChange\n  });\n  init({\n    windowObject: window,\n    docObject: document\n  });\n});\nCoCreateSocket.listen(\"ccStyle\", function (_ref2) {\n  var value = _ref2.value,\n      dataAttribute = _ref2.dataAttribute,\n      dataProperty = _ref2.dataProperty,\n      elementId = _ref2.elementId,\n      unit = _ref2.unit;\n  var inputs = allFrame(function (frame) {\n    return frame.querySelector(\"[data-style=\".concat(dataAttribute, \"][data-style_sync=\").concat(dataProperty, \"]\"));\n  });\n  inputs.forEach(function (input) {\n    updateElementValue(value + unit, dataAttribute, dataProperty, elementId);\n  });\n});\n\nfunction collaborate(_ref3) {\n  var value = _ref3.value,\n      input = _ref3.input,\n      dataProperty = _ref3.dataProperty,\n      dataAttribute = _ref3.dataAttribute,\n      elementId = _ref3.elementId,\n      element = _ref3.element,\n      unit = _ref3.unit;\n  // if (value != input.value) return;\n  tools.onCollaboration({\n    value: value,\n    unit: unit,\n    dataProperty: dataProperty,\n    dataAttribute: dataAttribute,\n    element: element\n  });\n  CoCreate.sendMessage({\n    broadcast_sender: false,\n    rooms: \"\",\n    emit: {\n      message: \"ccStyle\",\n      data: {\n        value: value,\n        unit: unit,\n        dataProperty: dataProperty,\n        dataAttribute: dataAttribute,\n        elementId: elementId\n      }\n    }\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/CoCreate-styles.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	// module exports must be returned from runtime so entry inlining is disabled
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__("./src/CoCreate-styles.js");
/******/ })()
.default;
});